{"version":3,"sources":["logo.svg","Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Weather","_useState","useState","city","temperature","humidity","pressure","sky","_useState2","Object","slicedToArray","weather","setWeather","weatherTab","react_default","a","createElement","CardBody","ListGroup","className","ListGroupItem","Container","style","marginTop","marginBottom","height","overflow","Row","Col","xs","Card","CardImg","top","width","src","padding","Form","onSubmit","event","preventDefault","stopPropagation","asyncToGenerator","regenerator_default","mark","_callee","weatherFromSite","wrap","_context","prev","next","document","getElementById","value","alert","abrupt","axios","concat","sent","console","log","data","description","name","main","temp","stop","FormGroup","Label","Input","type","id","placeholder","textAlign","Button","color","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe6a8ebe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\r\nimport { Container, Form, Button, Input, Label, Card, CardImg, CardBody, Row, Col, ListGroup, ListGroupItem, FormGroup } from 'reactstrap';\r\nimport axios from 'axios';\r\n\r\nexport default function (){\r\n  \r\n  const [weather, setWeather] = useState({\r\n    city: null,\r\n    temperature: null,\r\n    humidity: null,\r\n    pressure: null,\r\n    sky: null,\r\n  });\r\n\r\n  function changeWeather (event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    (async function (){\r\n      const city = document.getElementById('city').value;\r\n      if(!city){\r\n        alert('Enter city name');\r\n        return 0;\r\n      }\r\n      const weatherFromSite = await axios(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=fec8b249edbf6232ae4e5957bd8e7ecf&units=metric`);\r\n      console.log(weatherFromSite.data.weather[0].description);\r\n      setWeather({ \r\n        city: weatherFromSite.data.name,\r\n        temperature: weatherFromSite.data.main.temp,\r\n        humidity: weatherFromSite.data.main.humidity,\r\n        pressure: weatherFromSite.data.main.pressure,\r\n        sky: weatherFromSite.data.weather[0].description,\r\n      });\r\n    })();\r\n  }\r\n\r\n  const weatherTab = \r\n  <CardBody>\r\n    <ListGroup className='text-left'>\r\n      <ListGroupItem>City: {weather.city}</ListGroupItem>\r\n      <ListGroupItem>Temperature: {weather.temperature} &#176; degree </ListGroupItem>\r\n      <ListGroupItem>Humidity: {weather.humidity}%</ListGroupItem>\r\n      <ListGroupItem>Pressure: {weather.pressure}pv</ListGroupItem>\r\n      <ListGroupItem>Weather: {weather.sky}</ListGroupItem>\r\n    </ListGroup>\r\n  </CardBody>\r\n  \r\n  return(\r\n    <Container style={{marginTop: '10px',marginBottom: '10px', height: '97vh', overflow: 'hiden'}}>\r\n      <Row>\r\n        <Col xs={12}>\r\n          <Card className='text-center'>\r\n            <Row>\r\n              <Col xs={12}>\r\n                <CardImg top width='40%' src='https://source.unsplash.com/1600x900/?nature,weather' ></CardImg>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={12}>\r\n                <CardBody style={{padding: 10 +'px'}}>\r\n                  <Form onSubmit={changeWeather}>\r\n                    <FormGroup>\r\n                      <Label>Enter City</Label>\r\n                      <Input type='text' id='city' placeholder='London' style={{textAlign: 'left'}}></Input>\r\n                      <Button type='submit' color='info' style={{marginTop: 10+'px'}}> Submit </Button>\r\n                    </FormGroup>\r\n                  </Form>\r\n                </CardBody>\r\n              </Col>\r\n            </Row>\r\n              {weather.sky && weatherTab}\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './Weather';\nimport Weather from './Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}